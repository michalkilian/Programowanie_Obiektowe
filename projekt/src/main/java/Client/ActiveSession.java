package Client;

import GeneralClasses.Meme;
import GeneralClasses.MessageToClient;
import GeneralClasses.MessageToServer;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;


/**
 * Class for storing information about active session and performing client-server communication
 *
 * @author Michal Kilian
 */
public class ActiveSession {

    Socket echoSocket = null;
    ObjectOutputStream out = null;
    ObjectInputStream in = null;

    /**
     * Information whether user was initialized or not
     */
    public static boolean connected = false;


    /**
     * Pseudo which will be stored as a meme author when active user create a meme
     */
    private String autisticPseudo = "";

    private String username;


    /**
     * Head of message generated by handling server response
     */
    private String responseHead;

    /**
     * Body of message generated by handling server response
     */
    private String responseBody;

    /**
     * List of memes retrieved from server after sending request
     */
    private ArrayList<Meme> memeList = new ArrayList<>();


    //User statistics
    /**
     * The sum of likes obtained by the memes created by active user
     */
    private String karma = "0";

    /**
     * Date when active user created account
     */
    private String registerDate = "";

    /**
     * Total number of memes created by active user
     */
    private String numberOfMemes = "0";

    /**
     * Max value of likes obtained by meme created by active user
     */
    private String topMemeKarma = "0";


    public String getAutisticPseudo() {
        return autisticPseudo;
    }

    public String getResponseHead() {
        return responseHead;
    }

    public String getResponseBody() {
        return responseBody;
    }

    public ArrayList<Meme> getMemeList() {
        return memeList;
    }

    public String getKarma() {
        return karma;
    }

    public String getRegisterDate() {
        return registerDate;
    }

    public String getNumberOfMemes() {
        return numberOfMemes;
    }

    public String getTopMemeKarma() {
        return topMemeKarma;
    }

    public String getUsername() {
        return username;
    }

    /**
     * Function connects with server and sends prepared earlier message
     *
     *
     * <p>
     * Messages are prepared in controllers and send by this method after establishing connection with server.
     * Returned message is handled by {@link #handleMessage(MessageToClient returnedMessage)}
     *
     * </p>
     *
     * @param message MessageToServer containing all information needed to handle request
     * @throws IOException
     * @throws ClassNotFoundException when casting fails
     */
    public void sendMessageToServer(MessageToServer message) throws IOException, ClassNotFoundException {
        connectToServer();
        out.writeObject(message);
        MessageToClient returnedMessage = (MessageToClient) in.readObject();
        handleMessage(returnedMessage);
    }


    /**
     * Establishes connection with server (localhost in version 1.1)
     */
    public void connectToServer() {
        echoSocket = null;
        out = null;
        in = null;

        try {
            echoSocket = new Socket("localhost", 9000);
            out = new ObjectOutputStream(echoSocket.getOutputStream());
            in = new ObjectInputStream(echoSocket.getInputStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Set properties based on response retrieved from server
     *
     * <p>
     * After successful reading response from server message is handled by this function. Depending on response
     * different properties are set. In most cases {@link #responseBody} and {@link #responseHead} which are used
     * to generate alerts. In some cases also information about active user.
     * </P>
     *
     * @param returnedMessage message retrieved from server
     */
    private void handleMessage(MessageToClient returnedMessage) {
        responseHead = null;
        switch (returnedMessage.getResponse()) {
            case "createsuccess":
                responseHead = "Creation Successful";
                responseBody = "Meme created and added to base";
                break;
            case "createerror":
                responseHead = "Creation Failed";
                break;
            case "signinsuccess":
                responseHead = "Sign In Success";
                responseBody = "Logged as " + returnedMessage.getAutisticPseudo();
                this.autisticPseudo = returnedMessage.getAutisticPseudo();
                this.username = returnedMessage.getUsername();
                break;
            case "signinerror":
                responseHead = "Sign In Failed";
                responseBody = "";
                break;
            case "signupsuccess":
                responseHead = "Sign Up Success";
                responseBody = "Logged as " + returnedMessage.getAutisticPseudo();
                this.autisticPseudo = returnedMessage.getAutisticPseudo();
                this.username = returnedMessage.getUsername();
                break;
            case "signuperror":
                responseHead = "Sign Up Failed";
                responseBody = "";
                break;
            case "searchallsuccess":
            case "searchtagsuccess":
            case "searchauthorsuccess":
            case "searchtitlesuccess":
                memeList = returnedMessage.getMemeList();
                break;
            case "searchallerror":
            case "searchauthorerror":
            case "searchtitleerror":
            case "searchtagerror":
                responseHead = "Error";
                responseBody = "Can't load memes";
                break;
            case "statssuccess":
                karma = returnedMessage.getKarma();
                topMemeKarma = returnedMessage.getTopMemeKarma();
                registerDate = returnedMessage.getRegisterDate();
                numberOfMemes = returnedMessage.getNumberOfMemes();
                break;
            case "statserror":
                break;
            case "ratememesuccess":
                responseHead = "ratememesuccess";
                break;
            case "ratememeerror":
                responseHead = "ratememeerror";
                break;

        }
    }

}
